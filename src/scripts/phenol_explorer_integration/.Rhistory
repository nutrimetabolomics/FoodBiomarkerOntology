Biobase::pData(st000284)[1]
- Biobase::pData(st000284)[1 %in% c("CRC", "Healthy")]
Biobase::pData(st000284)[1 %in% c("CRC", "Healthy")]
st000284 %>%
PomaVolcano()
MSnbase::pData(st000284)
st000284_subset <- st000284[MSnbase::pData(st000284)[1] %in% c("CRC", "Healthy") ,]
st000284_subset %>%
PomaVolcano()
st000284_subset
MSnbase::sampleNames(st000284)
MSnbase::featureNames(st000284)
droplevels(pData(st000284))
droplevels(MSnbase::pData(st000284))
st000284_subset <- st000284[, MSnbase::pData(st000284)[1] %in% c("CRC", "Healthy")]
st000284_subset %>%
PomaVolcano()
st000284_subset
MSnbase::pData(st000284)[1]
st000284_subset <- st000284[, MSnbase::pData(st000284)[1] %in% c("CRC", "Healthy")]
st000284_subset %>%
PomaVolcano()
colnames(st000284)
st000284@phenoData@data
st000284_subset <- st000284[, colnames(st000284)[st000284@phenoData@data$factors %in% c("CRC", "Healthy")]]
st000284_subset %>%
PomaVolcano()
?PomaVolcano
st000284_subset %>%
PomaVolcano(log2FC = 0.5, xlim = 1)
st000284_subset %>%
PomaVolcano()
st000284_subset %>%
PomaVolcano(labels = TRUE)
library(tidyverse)
composition <- readxl::read_xlsx("data/composition-data.xlsx") %>%
rownames_to_column()
here::here()
here::set_here()
setwd("~/Dropbox/FoodBiomarkerOntology/src/scripts/phenol_explorer_integration")
composition <- readxl::read_xlsx("data/composition-data.xlsx") %>%
rownames_to_column()
foods_fobitools <- fobitools::annotate_foods(foods = composition[, c(1,4)])
annotated_foods <- foods_fobitools$annotated %>%
dplyr::rename(food = FOOD_NAME)
composition_fobi <- composition %>%
right_join(annotated_foods, by = "food") %>%
select(FOBI_ID, FOBI_NAME, food, compound_group,
compound_sub_group, compound, publication_ids, pubmed_ids)
compounds <- readxl::read_xls("data/compounds.xls") %>%
select(Name, `ChEBI ID`, `PubChem ID`) %>%
dplyr::rename(compound = Name)
composition_fobi <- composition_fobi %>%
left_join(compounds, by = "compound") %>%
mutate(compound = tolower(compound))
metabolites_fobi <- fobitools::parse_fobi(terms = "FOBI:01501", get = "des") %>%
select(1:4) %>%
mutate(compound = tolower(name))
composition_fobi <- composition_fobi %>%
left_join(metabolites_fobi, by = "compound") %>%
filter(!duplicated(.))
composition_fobi %>%
filter(is.na(name)) %>%
filter(!duplicated(compound)) %>%
pull(compound) %>%
str_to_title() %>%
cat(sep = "\n")
annotations_1 <- readr::read_csv("data/cts-20210714170715.csv") %>%
na_if("No result") %>%
na_if("undefined")
annotations_2 <- readr::read_csv("data/cts-20210714172629.csv") %>%
na_if("No result") %>%
na_if("undefined")
annotations <- left_join(annotations_1, annotations_2, by = "Chemical Name") %>%
select(-Score)
library(classyfireR)
annotations_nona <- annotations %>%
filter(!is.na(InChIKey))
df <- purrr::map(annotations_nona$InChIKey, get_classification)
save(df, file = "data/classyfireR.rda")
annotations
df
View(df)
purrr::map_df(df, dplyr::bind_rows)
class(df)
dplyr::bind_rows(df)
dplyr::bind_rows(df)
classification(df)
classyfireR::classification(df)
chebi(df
)
df_class <- purrr::map(df, classification)
View(df_class)
df_class <- purrr::map(df, classification) %>%
bind_rows()
View(df_class)
purrr::map(df, classification)
purrr::map(df, classification) %>%
purrr::map(slice(n()))
purrr::map(df, classification) %>%
purrr::map(slice(n(.)))
purrr::map(df, classification) %>%
purrr::map(slice(1L))
purrr::map(df, classification) %>%
purrr::map(., slice(1L))
purrr::map(df, classification)
df_class <- purrr::map(df, classification) %>%
purrr::map(tail(1))
df_class
df_class <- purrr::map(df, classification) %>%
purrr::map(tail)
df_class
df_class <- purrr::map(df, classification) %>%
purrr::map(slice(n()))
purrr::map(slice(1)
)
df_class <- purrr::map(df, classification) %>%
purrr::map(slice(1))
classification
showMethods("classification")
df
df_class <- purrr::map(df, classification) %>%
purrr::map(~ slice(1))
df_class <- purrr::map(df, classification) %>%
bind_rows()
purrr::map(df, classification) %>%
names(annotations_nona$InChIKey)
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey)
purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey)
View(annotations_nona)
stack()
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
stack()
purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey)
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
unstack()
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
unnest()
?enframe
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest()
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value))
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(n())
purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey)
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(1)
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(n())
View(composition_fobi)
annotations
View(composition_fobi)
fobi <- fobitools::parse_fobi()
metabolites_fobi$name
metabolites_fobi[!metabolites_fobi$name %in% df_class$Classification]
metabolites_fobi$name[!metabolites_fobi$name %in% df_class$Classification]
View(metabolites_fobi)
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(c(n()-1, n()))
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(n()-1)
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(n()-2)
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) #%>%
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) #%>%
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
fobi <- fobitools::parse_fobi()
View(fobi)
FOBI:050098
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(1)
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(2)
unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
group_by(name) %>%
slice(3)
unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
unique(cat(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name], sep = "\n"))
unique(cat(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name], sep = "\n"))
unique(cat(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]))
df_class$Classification[!df_class$Classification %in% metabolites_fobi$name]
unique(cat(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name], sep = "\n"))
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value))
unique(cat(df_class[!df_class$Classification %in% metabolites_fobi$name], sep = "\n"))
unique(df_class[!df_class$Classification %in% metabolites_fobi$name])
unique(df_class[!df_class$Classification %in% metabolites_fobi$name ,])
df_class[!df_class$Classification %in% metabolites_fobi$name ,]
df_class[!duplicated(!df_class$Classification %in% metabolites_fobi$name ,)]
df_class[!duplicated(!df_class$Classification %in% metabolites_fobi$name) ,]
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value))
df_class[!duplicated(!df_class$Classification %in% metabolites_fobi$name) ,]
df_class[duplicated(!df_class$Classification %in% metabolites_fobi$name) ,]
df_class[!df_class$Classification %in% metabolites_fobi$name ,]
df_class[!df_class$Classification %in% metabolites_fobi$name ,]
View(df_class[!df_class$Classification %in% metabolites_fobi$name ,])
unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
filter(Classification != "Organic compounds") #%>%
unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
?pivot_wider
df_class %>%
pivot_wider(names_from = Level, values_from = Classification)
df_class %>%
select(Level, Classification) %>%
pivot_wider(names_from = Level, values_from = Classification)
df_class %>%
select(Level, Classification) %>%
pivot_wider(names_from = Level, values_from = Classification, values_fn = list)
df_class %>%
select(Level, Classification) %>%
pivot_wider(names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:6)
df_class %>%
select(Level, Classification) %>%
pivot_wider(names_from = Level, values_from = Classification, values_fn = list)
df_class %>%
select(Level, Classification) %>%
pivot_wider(names_from = Level, values_from = Classification, values_fn = list) %>%
View()
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
View()
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list)
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7)
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
filter(Classification != "Organic compounds")
out_fobi <- unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter(. %in% out_fobi)
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(~ . %in% out_fobi)
out_fobi
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_if(~ . %in% out_fobi)
?any_vars()
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7)
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi))
out_fobi
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name)
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "type", names_repair = "unique")
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi))
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi))
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "type", names_repair = "unique")
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique") %>%
outer(which(class %in% out_fobi), -1:1, `+`)
df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique") %>%
group_by(name...1)
tmp <- df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique")
tmp[which(rownames(tmp) %in% out_fobi) + c(-1, 1), ]
tmp
tmp[which(tmp$class %in% out_fobi) + c(-1, 1), ]
tmp[which(tmp$class %in% out_fobi) + c(-1), ]
tmp <- df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique")
tmp <- tmp[which(tmp$class %in% out_fobi) + c(-1), ]
tmp
tmp %>%
group_by(name...1) %>%
pivot_wider(names_from = class)
tmp %>%
group_by(name...1) %>%
pivot_wider(names_from = class, values_from = class)
tmp
tmp %>%
select(-1) %>%
group_by(name...1) %>%
pivot_wider(names_from = name...2, values_from = class)
tmp %>%
select(-1) %>%
group_by(name...2) %>%
pivot_wider(names_from = name...2, values_from = class)
tmp %>%
select(-1) %>%
group_by(name...2) %>%
pivot_wider(names_from = name...2, values_from = class, values_fn = list)
tmp %>%
group_by(name...1) %>%
pivot_wider(id_cols = name, names_from = name...2, values_from = class, values_fn = list)
tmp %>%
group_by(name...1) %>%
pivot_wider(id_cols = name...1, names_from = name...2, values_from = class, values_fn = list)
tmp %>%
group_by(name...1) %>%
pivot_wider(id_cols = name...1, values_from = class, values_fn = list)
tmp %>%
group_by(name...1) %>%
pivot_wider(names_from = name...1, values_from = class, values_fn = list)
tmp
Query <- submit_query(label = 'query_1',
input = out_fobi,
type = 'PARENT')
)
,
''
)
?submit_query
out_fobi
direct_parent(out_fobi)
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
filter(Classification != "Organic compounds")
out_fobi <- unique(df_class$Classification[!df_class$Classification %in% metabolites_fobi$name])
tmp <- df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique")
tmp <- tmp[which(tmp$class %in% out_fobi) + c(-1), ]
View(tmp)
tmp <- df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique")
tmp <- tmp[which(tmp$class %in% out_fobi) + c(-1,1), ]
tmp
tmp %>%
filter(!duplicated(name...2, class))
tmp <- df_class %>%
select(name, Level, Classification) %>%
pivot_wider(id_cols = name, names_from = Level, values_from = Classification, values_fn = list) %>%
unnest(1:7) %>%
filter_all(any_vars(. %in% out_fobi)) %>%
pivot_longer(cols = -name, values_to = "class", names_repair = "unique")
tmp
out_fobi
df_class <- purrr::map(df, classification) %>%
set_names(annotations_nona$InChIKey) %>%
enframe() %>%
unnest(cols = c(value)) %>%
filter(Classification != "Organic compounds")
ls_class <- list()
ls_class <- list()
for (i in 1:nrow(df_class)) {
if(df_class$Classification[i] %in% out_fobi){
ls_class[[i]] <- data.frame(parent = df_class$Classification[i-1], child = df_class$Classification[i])
}
}
bind_rows(ls_class)
fobi_new_classes <- bind_rows(ls_class) %>%
filter(!duplicated(.))
View(fobi_new_classes)
length(fobi_new_classes$child %in% out_fobi)
openxlsx::write.xlsx(fobi_new_classes, "data/fobi_new_classes.xlsx")
cat(out_fobi, sep = "\n")
View(fobi)
composition_fobi
annotations
composition_fobi
annotations <- annotations %>%
rename(compound = 1) %>%
mutate(compound = tolower(compound))
composition_fobi %>%
left_join(annotations, by = "compound")
composition_fobi_anno <- composition_fobi %>%
left_join(annotations, by = "compound")
View(composition_fobi_anno)
composition_fobi_anno <- composition_fobi %>%
left_join(annotations, by = "compound") %>%
mutate(ChEBI = ifelse(is.na(ChEBI), paste0("CHEBI", `ChEBI ID`), ChEBI))
composition_fobi_anno <- composition_fobi %>%
left_join(annotations, by = "compound")
composition_fobi_anno <- composition_fobi %>%
left_join(annotations, by = "compound") %>%
mutate(ChEBI = ifelse(is.na(ChEBI), paste0("CHEBI:", `ChEBI ID`), ChEBI))
composition_fobi_anno <- composition_fobi %>%
left_join(annotations, by = "compound") %>%
mutate(ChEBI = ifelse(is.na(ChEBI), paste0("CHEBI:", `ChEBI ID`), ChEBI)) %>%
na_if("CHEBI:NA")
View(annotations_nona)
