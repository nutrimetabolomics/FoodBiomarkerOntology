library(classyfireR)
new_met <- readxl::read_excel("update ontology.xlsx")
library(ontologyIndex)
path <- "../ontology/fobi.obo"
ontology <- get_ontology(path, extract_tags = "everything")
ontology$name
mynames <- data.frame(ontology$name)
View(mynames)
new_met <- readxl::read_excel("update ontology.xlsx")
View(new_met)
library(ontologyIndex)
path <- "../ontology/fobi.obo"
ontology <- get_ontology(path, extract_tags = "everything")
mynames <- data.frame(metabolite = ontology$name)
final <- merge(mynames, new_met, by = "metabolite")
View(final)
library(tidyverse)
library(classyfireR)
new_met <- readxl::read_excel("update ontology.xlsx")
# new_met <- new_met %>%
#   filter(is.na(FOBI)) %>%
#   filter(!is.na(`INCHI KEY`)) %>%
#   filter(!is.na(food)) %>%
#   select(metabolite, food) %>%
#   separate_rows(food, sep = ",", convert = FALSE) %>%
#   mutate(food = str_trim(food),
#          food = str_replace_all(food, "Fruits", "plant fruit food product"),
#          food = str_replace_all(food, "Vegetables", "vegetable food product"),
#          food = str_replace_all(food, "Coffe", "coffee based beverage product"),
#          food = str_replace_all(food, "Tea", "tea based beverage product"),
#          food = str_replace_all(food, "Cacao", "cacao food product"),
#          food = str_replace_all(food, "Whole_Grain_Cereals", "Whole grain cereal products"),
#          food = str_replace_all(food, "Legumes", "legume food product"),
#          food = str_replace_all(food, "Nuts", "nut (whole or part)"),
#          food = str_replace_all(food, "red_wine", "red wine"),
#          food = str_replace_all(food, "olive_oil", "olive oil"),
#          food = str_replace_all(food, "apple", "apple (whole)"),
#          food = str_replace_all(food, "Banana", "banana (whole, ripe)"),
#          food = str_replace_all(food, "Berries", "berry (whole, raw)"),
#          food = str_replace_all(food, "Whole_Grain_Oat", "whole oats (raw)"),
#          food = str_replace_all(food, "producte", "product"))
# classification_result <- list()
#
# for(i in 1:nrow(new_met)){
#
#   classification_result[[i]] <- get_classification(new_met$`INCHI KEY`[i])
#
# }
# xlsx::write.xlsx(new_met, "files/relations.xlsx")
new_met <- new_met %>%
filter(is.na(FOBI)) %>%
filter(!is.na(`INCHI KEY`))
library(ontologyIndex)
path <- "../ontology/fobi.obo"
ontology <- get_ontology(path, extract_tags = "everything")
mynames <- data.frame(metabolite = ontology$name)
final <- merge(mynames, new_met, by = "metabolite")
View(final)
library(tidyverse)
library(classyfireR)
new_met <- readxl::read_excel("update ontology.xlsx")
# new_met <- new_met %>%
#   filter(is.na(FOBI)) %>%
#   filter(!is.na(`INCHI KEY`)) %>%
#   filter(!is.na(food)) %>%
#   select(metabolite, food) %>%
#   separate_rows(food, sep = ",", convert = FALSE) %>%
#   mutate(food = str_trim(food),
#          food = str_replace_all(food, "Fruits", "plant fruit food product"),
#          food = str_replace_all(food, "Vegetables", "vegetable food product"),
#          food = str_replace_all(food, "Coffe", "coffee based beverage product"),
#          food = str_replace_all(food, "Tea", "tea based beverage product"),
#          food = str_replace_all(food, "Cacao", "cacao food product"),
#          food = str_replace_all(food, "Whole_Grain_Cereals", "Whole grain cereal products"),
#          food = str_replace_all(food, "Legumes", "legume food product"),
#          food = str_replace_all(food, "Nuts", "nut (whole or part)"),
#          food = str_replace_all(food, "red_wine", "red wine"),
#          food = str_replace_all(food, "olive_oil", "olive oil"),
#          food = str_replace_all(food, "apple", "apple (whole)"),
#          food = str_replace_all(food, "Banana", "banana (whole, ripe)"),
#          food = str_replace_all(food, "Berries", "berry (whole, raw)"),
#          food = str_replace_all(food, "Whole_Grain_Oat", "whole oats (raw)"),
#          food = str_replace_all(food, "producte", "product"))
# classification_result <- list()
#
# for(i in 1:nrow(new_met)){
#
#   classification_result[[i]] <- get_classification(new_met$`INCHI KEY`[i])
#
# }
# xlsx::write.xlsx(new_met, "files/relations.xlsx")
new_met <- new_met %>%
filter(is.na(FOBI)) %>%
filter(!is.na(`INCHI KEY`))
library(ontologyIndex)
path <- "../ontology/fobi.obo"
ontology <- get_ontology(path, extract_tags = "everything")
mynames <- data.frame(metabolite = ontology$name)
mynames$FOBI <- rownames(mynames)
final <- merge(mynames, new_met, by = "metabolite")
library(tidyverse)
library(classyfireR)
new_met <- readxl::read_excel("update ontology.xlsx")
# new_met <- new_met %>%
#   filter(is.na(FOBI)) %>%
#   filter(!is.na(`INCHI KEY`)) %>%
#   filter(!is.na(food)) %>%
#   select(metabolite, food) %>%
#   separate_rows(food, sep = ",", convert = FALSE) %>%
#   mutate(food = str_trim(food),
#          food = str_replace_all(food, "Fruits", "plant fruit food product"),
#          food = str_replace_all(food, "Vegetables", "vegetable food product"),
#          food = str_replace_all(food, "Coffe", "coffee based beverage product"),
#          food = str_replace_all(food, "Tea", "tea based beverage product"),
#          food = str_replace_all(food, "Cacao", "cacao food product"),
#          food = str_replace_all(food, "Whole_Grain_Cereals", "Whole grain cereal products"),
#          food = str_replace_all(food, "Legumes", "legume food product"),
#          food = str_replace_all(food, "Nuts", "nut (whole or part)"),
#          food = str_replace_all(food, "red_wine", "red wine"),
#          food = str_replace_all(food, "olive_oil", "olive oil"),
#          food = str_replace_all(food, "apple", "apple (whole)"),
#          food = str_replace_all(food, "Banana", "banana (whole, ripe)"),
#          food = str_replace_all(food, "Berries", "berry (whole, raw)"),
#          food = str_replace_all(food, "Whole_Grain_Oat", "whole oats (raw)"),
#          food = str_replace_all(food, "producte", "product"))
# classification_result <- list()
#
# for(i in 1:nrow(new_met)){
#
#   classification_result[[i]] <- get_classification(new_met$`INCHI KEY`[i])
#
# }
# xlsx::write.xlsx(new_met, "files/relations.xlsx")
new_met <- new_met %>%
filter(is.na(FOBI)) %>%
filter(!is.na(`INCHI KEY`))
library(ontologyIndex)
path <- "../ontology/fobi.obo"
ontology <- get_ontology(path, extract_tags = "everything")
mynames <- data.frame(metabolite = ontology$name)
mynames$FOBI <- gsub("_", ":", rownames(mynames))
final <- merge(mynames, new_met, by = "metabolite")
xlsx::write.xlsx(final[,1:2], "files/FOBI.xlsx")
library(tidyverse)
library(classyfireR)
new_met <- readxl::read_excel("update ontology.xlsx")
# new_met <- new_met %>%
#   filter(is.na(FOBI)) %>%
#   filter(!is.na(`INCHI KEY`)) %>%
#   filter(!is.na(food)) %>%
#   select(metabolite, food) %>%
#   separate_rows(food, sep = ",", convert = FALSE) %>%
#   mutate(food = str_trim(food),
#          food = str_replace_all(food, "Fruits", "plant fruit food product"),
#          food = str_replace_all(food, "Vegetables", "vegetable food product"),
#          food = str_replace_all(food, "Coffe", "coffee based beverage product"),
#          food = str_replace_all(food, "Tea", "tea based beverage product"),
#          food = str_replace_all(food, "Cacao", "cacao food product"),
#          food = str_replace_all(food, "Whole_Grain_Cereals", "Whole grain cereal products"),
#          food = str_replace_all(food, "Legumes", "legume food product"),
#          food = str_replace_all(food, "Nuts", "nut (whole or part)"),
#          food = str_replace_all(food, "red_wine", "red wine"),
#          food = str_replace_all(food, "olive_oil", "olive oil"),
#          food = str_replace_all(food, "apple", "apple (whole)"),
#          food = str_replace_all(food, "Banana", "banana (whole, ripe)"),
#          food = str_replace_all(food, "Berries", "berry (whole, raw)"),
#          food = str_replace_all(food, "Whole_Grain_Oat", "whole oats (raw)"),
#          food = str_replace_all(food, "producte", "product"))
# classification_result <- list()
#
# for(i in 1:nrow(new_met)){
#
#   classification_result[[i]] <- get_classification(new_met$`INCHI KEY`[i])
#
# }
# xlsx::write.xlsx(new_met, "files/relations.xlsx")
new_met <- new_met %>%
filter(is.na(FOBI)) %>%
filter(!is.na(`INCHI KEY`))
library(ontologyIndex)
path <- "../ontology/fobi.obo"
ontology <- get_ontology(path, extract_tags = "everything")
mynames <- data.frame(metabolite = ontology$name)
mynames$FOBI <- gsub("_", ":", rownames(mynames))
final <- merge(mynames, new_met, by = "metabolite")
xlsx::write.xlsx(final[,1:2], "files/FOBI.xlsx")
library(tidyverse)
library(data.table)
fobi <- readr::read_csv("../fobi-export.csv")
fobi <- readr::read_csv("..fobi-export.csv")
fobi <- readr::read_csv("./fobi-export.csv")
getwd()
fobi <- readr::read_csv(".../fobi-export.csv")
fobi <- readr::read_csv("../fobi-export.csv")
fobi <- readr::read_csv("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
fobi <- fobi[!(is.na(fobi$`http://purl.obolibrary.org/obo/FOBI_00422`)) ,]
fobi <- fobi[, c(4, 21)]
colnames(fobi) <- c("food", "label")
fobi <- readr::read_csv("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
View(fobi)
View(fobi)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
View(fobi)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
View(fobi)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
View(fobi)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
View(fobi)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
# fobi <- fobi[!(is.na(fobi$`http://purl.obolibrary.org/obo/FOBI_00422`)) ,]
# fobi <- fobi[, c(4, 21)]
# colnames(fobi) <- c("food", "label")
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
View(dt_out)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
# fobi <- fobi[!(is.na(fobi$`http://purl.obolibrary.org/obo/FOBI_00422`)) ,]
fobi <- fobi[!is.na(fobi$BiomarkerOf)]
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
dt_out$nrow <- NULL
dt_out$metabolite <- gsub("'", '', dt_out$metabolite)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
fobi <- fobi[!is.na(fobi$BiomarkerOf)]
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
fobi <- fobi[!is.na(fobi$BiomarkerOf), ]
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
dt_out$nrow <- NULL
dt_out$metabolite <- gsub("'", '', dt_out$metabolite)
View(dt_out)
dt_out$food <- gsub('"', '', dt_out$food)
dt_out$food <- gsub('"', "", dt_out$food)
dt_out$food <- gsub('"', "", dt_out$food, fixed = T)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
# fobi <- fobi[!(is.na(fobi$`http://purl.obolibrary.org/obo/FOBI_00422`)) ,]
fobi <- fobi[!is.na(fobi$BiomarkerOf), ]
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
dt_out$nrow <- NULL
dt_out$metabolite <- gsub("'", '', dt_out$metabolite)
dt_out$food <- gsub('"', "", dt_out$food, fixed = T)
View(dt_out)
dt_out$food <- gsub("'", "", dt_out$food, fixed = T)
View(dt_out)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
# fobi <- fobi[!(is.na(fobi$`http://purl.obolibrary.org/obo/FOBI_00422`)) ,]
fobi <- fobi[!is.na(fobi$BiomarkerOf), ]
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
dt_out$nrow <- NULL
dt_out$metabolite <- gsub("'", '', dt_out$metabolite)
dt_out$food <- gsub("'", "", dt_out$food, fixed = T)
write.csv(dt_out, "200226_fobi_relations", row.names = F)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/fobi-export.csv")
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/src/csv/200226_fobi-export.csv")
fobi <- fobi[!is.na(fobi$BiomarkerOf), ]
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
dt_out$nrow <- NULL
dt_out$metabolite <- gsub("'", '', dt_out$metabolite)
dt_out$food <- gsub("'", "", dt_out$food, fixed = T)
View(dt_out)
library(tidyverse)
library(data.table)
fobi <- readr::read_csv2("/home/pol/Escritorio/FoodBiomarkerOntology/src/csv/200226_fobi-export.csv")
# fobi <- fobi[!(is.na(fobi$`http://purl.obolibrary.org/obo/FOBI_00422`)) ,]
fobi <- fobi[!is.na(fobi$BiomarkerOf), ]
fobi <- data.table(fobi)
dt_out <- fobi[, list(metabolite = Entity,
food = unlist(strsplit(BiomarkerOf, '\t'))),
by = 1:nrow(fobi)]
dt_out$nrow <- NULL
dt_out$metabolite <- gsub("'", '', dt_out$metabolite)
dt_out$food <- gsub("'", "", dt_out$food, fixed = T)
write.csv(dt_out, "200226_fobi_relations", row.names = F)
data <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
View(data)
load("files/84classyfied.RData")
View(df)
library(tidyverse)
data <- bind_rows(df)
View(data)
df[[1]]
View(df)
new_chemicals <- read_csv("files/FOBI_new_metabolites.xlsx")
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
View(data)
View(new_chemicals)
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
names(df) <- new_chemicals$metabolite
df[1]
name(df[1])
names(df[1])
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
for (i in 1:length(df)){
df[[i]]$metabolite <- names(df[1])
}
for (i in 1:length(df)){
df[[i]]$metabolite <- names(df[i])
}
for (i in 1:length(df)){
df[]i$metabolite <- names(df[i])
}
for (i in 1:length(df)){
df[]i$metabolite <- names(df[i])
}
for (i in 1:length(df)){
df[i]$metabolite <- names(df[i])
}
names(df[1])
df[1]
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
for (i in 1:length(df)){
df[i]$metabolite <- names(df[i])
}
View(df)
df[1]
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
names(df) <- new_chemicals$metabolite
for (i in 1:length(df)){
df[i]$metabolite <- names(df[i])
}
df[1]
warnings()
i<-2
names(df[i])
df[i]$metabolite
unnest()
unnest(df)
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
names(df) <- new_chemicals$metabolite
unnest(df)
unnest(bind_rows(df))
library(purrr)
ans <- map_df(df, ~as.data.frame(.x), .id="id")
View(ans)
library(tidyverse)
library(purrr)
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
names(df) <- new_chemicals$metabolite
res <- map_df(df, ~as.data.frame(.x), .id = "id")
View(res)
res %>%
group_by(id) %>%
slice(c(1, n())) %>%
ungroup()
res %>%
group_by(id) %>%
slice(n()) %>%
ungroup()
library(tidyverse)
library(tidyverse)
library(purrr)
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
names(df) <- new_chemicals$metabolite
res <- map_df(df, ~as.data.frame(.x), .id = "id")
res <- res %>% group_by(id) %>% slice(n()) %>% ungroup()
View(res)
res[duplicated(res$id),]
rels <- readxl::read_excel("files/relations.xlsx")
View(rels)
library(tidyverse)
library(purrr)
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
load("files/84classyfied.RData")
names(df) <- new_chemicals$metabolite
res <- map_df(df, ~as.data.frame(.x), .id = "id")
res <- res %>% group_by(id) %>% slice(n()) %>% ungroup()
xlsx::write.xlsx(res, "new84chems.xlsx", row.names = T)
missclassified <- new_chemicals[!(new_chemicals$metabolite %in% res$id) ,]
View(missclassified)
xlsx::write.xlsx(missclassified, "files/missclassified.xlsx", row.names = T)
View(new_chemicals)
new_hmdb <- new_chemicals[!is.na(new_chemicals$HMDB),]
new_kegg <- new_chemicals[!is.na(new_chemicals$KEGG),]
xlsx::write.xlsx(new_hmdb, "files/new_hmdb.xlsx", row.names = T)
xlsx::write.xlsx(new_kegg, "files/new_kegg.xlsx", row.names = T)
test <- readxl::read_excel("files/update ontology.xlsx")
View(test)
test <- readxl::read_excel("/Users/pol/Dropbox/FOBI/FOBI_Visualization_Tool/csv/200226_fobi-export.csv")
test <- read_csv("/Users/pol/Dropbox/FOBI/FOBI_Visualization_Tool/csv/200226_fobi-export.csv")
View(test)
test <- read_csv2("/Users/pol/Dropbox/FOBI/FOBI_Visualization_Tool/csv/200226_fobi-export.csv")
fobi <- read_csv2("/Users/pol/Dropbox/FOBI/FOBI_Visualization_Tool/csv/200226_fobi-export.csv")
fobi <- data[!is.na(data$Type), ]
fobi$Entity <- gsub("'", '', fobi$Entity)
fobi$`Superclass(es)` <- gsub("'", '', fobi$`Superclass(es)`)
fobi$BiomarkerOf <- gsub("'", "", fobi$BiomarkerOf, fixed = T)
fobi$Contains <- gsub("'", "", fobi$Contains, fixed = T)
View(fobi)
fobi <- read_csv2("/Users/pol/Dropbox/FOBI/FOBI_Visualization_Tool/csv/200226_fobi-export.csv")
fobi <- fobi[!is.na(fobi$Type), ]
fobi$Entity <- gsub("'", '', fobi$Entity)
fobi$`Superclass(es)` <- gsub("'", '', fobi$`Superclass(es)`)
fobi$BiomarkerOf <- gsub("'", "", fobi$BiomarkerOf, fixed = T)
fobi$Contains <- gsub("'", "", fobi$Contains, fixed = T)
res$Classification[!(res$Classification %in% fobi$`Superclass(es)`)]
new_classes <- res$Classification[!(res$Classification %in% fobi$`Superclass(es)`)]
res2 <- res %>% group_by(id) %>% slice(n()-1) %>% ungroup()
View(res2)
res2 <- res %>% group_by(id) %>% slice(c(n()-1)) %>% ungroup()
res2 <- res %>% group_by(id) %>% slice(n-1) %>% ungroup()
res2 <- res %>% group_by(id) %>% slice(4) %>% ungroup()
res2 <- res %>% group_by(id) %>% slice(c(4)) %>% ungroup()
res2 <- res %>% group_by(id) %>% slice(c(1,4)) %>% ungroup()
View(res2)
new_classes <- res$Classification[!(res$Classification %in% fobi$`Superclass(es)`) ,]
new_classes <- res[!(res$Classification %in% fobi$`Superclass(es)`) ,]
View(new_classes)
View(res)
res2 <- map_df(df, ~as.data.frame(.x), .id = "id")
View(res2)
new_classes <- res[!(res$Classification %in% fobi$`Superclass(es)`) | !(res$Classification %in% fobi$Entity) ,]
View(new_classes)
new_classes$Classification[!(duplicated(new_classes$Classification))]
View(res)
res2 <- map_df(df, ~as.data.frame(.x), .id = "id")
new<- classes <- new_classes$Classification[!(duplicated(new_classes$Classification))]
res2 <- map_df(df, ~as.data.frame(.x), .id = "id")
new_classes <- res[!(res$Classification %in% fobi$`Superclass(es)`) | !(res$Classification %in% fobi$Entity) ,]
new_classes <- new_classes$Classification[!(duplicated(new_classes$Classification))]
res2 <- map_df(df, ~as.data.frame(.x), .id = "id")
new_classes
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
print(res2$Classification[i-1])
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
paste0(res2$Classification[i-1], res2$Classification[i])
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
print(paste0(res2$Classification[i-1], res2$Classification[i]))
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
print(paste0(res2$Classification[i-1], "------>", res2$Classification[i]))
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
cat(paste0(res2$Classification[i-1], ";", res2$Classification[i]))
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
print(paste0(res2$Classification[i-1], ";", res2$Classification[i]))
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
cat(print(paste0(res2$Classification[i-1], ";", res2$Classification[i])))
}
}
for(i in 1:nrow(res2)){
if(res2$Classification[i] %in% new_classes){
print(paste0(res2$Classification[i-1], ";", res2$Classification[i]))
}
}
fobi <- read_csv2("/Users/pol/Dropbox/FOBI/FOBI_Visualization_Tool/csv/200226_fobi-export.csv")
fobi <- fobi[!is.na(fobi$Type), ]
fobi$Entity <- gsub("'", '', fobi$Entity)
fobi$`Superclass(es)` <- gsub("'", '', fobi$`Superclass(es)`)
fobi$BiomarkerOf <- gsub("'", "", fobi$BiomarkerOf, fixed = T)
fobi$Contains <- gsub("'", "", fobi$Contains, fixed = T)
Organoheterocyclic compounds;Tetrahydroisoquinolines
View(fobi)
View(new_chemicals)
View(new_chemicals)
View(new_chemicals)
View(res2)
new_chemicals <- readxl::read_excel("files/FOBI_new_metabolites.xlsx")
View(new_chemicals)
